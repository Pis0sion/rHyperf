<?php
namespace App\Exception\Handler;

use Hyperf\Contract\StdoutLoggerInterface;
use Hyperf\ExceptionHandler\ExceptionHandler;
use Hyperf\HttpMessage\Stream\SwooleStream;
use Psr\Http\Message\ResponseInterface;
use App\Exception\FooException;
use Throwable;

/**
 * 定义异常处理器
 */
class FooExceptionHandler extends  ExceptionHandler
{
    public function handle(Throwable $throwable, ResponseInterface $response)
    {
        // TODO: Implement handle() method.
        if ($throwable instanceof FooException)
        {
            $data = json_encode([
                'code'=>$throwable->getCode(),
                'message'=>$throwable->getMessage(),
            ]);
            //阻止冒泡
            $this->stopPropagation();
            return $response->withStatus(500)->withBody(new SwooleStream($data));
        }
        return $response;
    }
    public function isPropagationStopped(): bool
    {
        return parent::isPropagationStopped(); // TODO: Change the autogenerated stub
    }
    public function isValid(Throwable $throwable): bool
    {
        // TODO: Implement isValid() method.
        return true;
    }
    public function stopPropagation(): bool
    {
        // TODO: Change the autogenerated stub
        return parent::stopPropagation();
    }
}